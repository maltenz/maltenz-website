---
import { bodyScheme, colorSchemes, purple, yellow, orangeVariant, darkPurple } from '../theme/themePrimitives';

const { title = 'Malte' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=Pacifico&display=swap" rel="stylesheet">
    <meta name="generator" content={Astro.generator} />
    
    <meta name="astro-view-transitions-enabled" content="true" />
    <meta name="astro-view-transitions-fallback" content="animate" />
    
    <style is:global define:vars={{ 
      darkBg: bodyScheme.dark.default, 
      lightBg: bodyScheme.light.default,
      darkText: colorSchemes.dark.palette.text.primary,
      lightText: colorSchemes.light.palette.text.primary,
      purpleBg: purple[500],
      purpleText: colorSchemes.light.palette.text.primary,
      yellowBg: yellow[500],
      yellowText: colorSchemes.dark.palette.text.primary,
      orangeBg: orangeVariant[500],
      orangeText: colorSchemes.light.palette.text.primary,
      darkPurpleBg: darkPurple[500],
      darkPurpleText: colorSchemes.light.palette.text.primary
    }}>
      html[data-theme='dark'] body {
        background-color: var(--darkBg) !important;
        color: var(--darkText);
      }

      html[data-theme='light'] body {
        background-color: var(--lightBg) !important;
        color: var(--lightText);
      }

      html[data-theme='purple'] body {
        background-color: var(--purpleBg) !important;
        color: var(--purpleText);
      }

      html[data-theme='yellow'] body {
        background-color: var(--yellowBg) !important;
        color: var(--yellowText);
      }

      html[data-theme='orange'] body {
        background-color: var(--orangeBg) !important;
        color: var(--orangeText);
      }

      html[data-theme='dark-purple'] body {
        background-color: var(--darkPurpleBg) !important;
        color: var(--darkPurpleText);
      }
      html,
      body {
        margin: 0;
        width: 100%;
        height: 100%;
        font-size: 16px;
        font-family: "Lato", sans-serif;
      }
      h2, h3, h4, h5, h6 {
        font-weight: 700;
      }
      @media (min-width: 768px) {
        html,
        body {
          font-size: 20px; 
        }
      }

      /* Custom page transition styles */
      @view-transition {
        navigation: auto;
      }

      ::view-transition-old(root) {
        animation: fade-out 0.3s ease-out;
      }

      ::view-transition-new(root) {
        animation: fade-in 0.3s ease-in;
      }

      ::view-transition-old(#body-wrapper),
      ::view-transition-new(#body-wrapper) {
        opacity: 1;
      }

      @keyframes fade-out {
        from { opacity: 1; }
        to { opacity: 0; }
      }

      @keyframes fade-in {
        from { opacity: 0; }
        to { opacity: 1; }
      }
    </style>

    <script is:inline>
      try {
        const storedTheme = JSON.parse(localStorage.getItem('theme-storage'));
        const colorScheme = storedTheme?.state?.colorScheme || 'dark';
        document.documentElement.dataset.theme = colorScheme;
      } catch {
        document.documentElement.dataset.theme = 'dark';
      }
    </script>

    <slot name="head" />
  </head>
  <body>
    <slot />
  </body>
</html>