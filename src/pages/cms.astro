---
// Simple CMS interface using GitHub API directly
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Content Management</title>
    <style>
        body {
            font-family: system-ui, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .auth-section {
            text-align: center;
            padding: 40px 0;
        }
        .btn {
            background: #0070f3;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            text-decoration: none;
            display: inline-block;
        }
        .btn:hover {
            background: #0051cc;
        }
        .content-section {
            margin-top: 30px;
        }
        .collection {
            margin-bottom: 30px;
            padding: 20px;
            border: 1px solid #eee;
            border-radius: 6px;
        }
        .collection h3 {
            margin: 0 0 15px 0;
            color: #333;
        }
        .file-list {
            list-style: none;
            padding: 0;
        }
        .file-item {
            padding: 8px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        .edit-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 4px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-left: 10px;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Content Management System</h1>
        
        <div id="auth-section" class="auth-section">
            <h2>GitHub Authentication Required</h2>
            <p>Please authenticate with GitHub to manage your content.</p>
            <button id="login-btn" class="btn" onclick="loginWithGitHub()">
                Login with GitHub
            </button>
        </div>

        <div id="content-section" class="content-section hidden">
            <h2>Your Content</h2>
            
            <div class="collection">
                <h3>Hero Section</h3>
                <ul id="hero-files" class="file-list">
                    <li>Loading...</li>
                </ul>
            </div>

            <div class="collection">
                <h3>Blog Posts</h3>
                <ul id="posts-files" class="file-list">
                    <li>Loading...</li>
                </ul>
            </div>

            <button class="btn" onclick="logout()">Logout</button>
        </div>
    </div>

    <script>
        const CLIENT_ID = 'Ov23lig4gBQSGOFlvUy3';
        const REPO_OWNER = 'maltenz';
        const REPO_NAME = 'maltenz-website';

        // Check if user is already authenticated
        window.onload = function() {
            const token = localStorage.getItem('github_token');
            if (token) {
                showContentSection();
                loadContent();
            }
        };

        function loginWithGitHub() {
            const redirectUri = encodeURIComponent(window.location.origin + '/cms');
            const scope = encodeURIComponent('repo');
            const authUrl = `https://github.com/login/oauth/authorize?client_id=${CLIENT_ID}&redirect_uri=${redirectUri}&scope=${scope}`;
            window.location.href = authUrl;
        }

        function logout() {
            localStorage.removeItem('github_token');
            document.getElementById('auth-section').classList.remove('hidden');
            document.getElementById('content-section').classList.add('hidden');
        }

        function showContentSection() {
            document.getElementById('auth-section').classList.add('hidden');
            document.getElementById('content-section').classList.remove('hidden');
        }

        // Handle OAuth callback
        const urlParams = new URLSearchParams(window.location.search);
        const code = urlParams.get('code');

        if (code) {
            // Exchange code for token using our API
            fetch('/api/auth?code=' + code)
                .then(response => response.json())
                .then(data => {
                    if (data.token) {
                        localStorage.setItem('github_token', data.token);
                        // Remove code from URL
                        window.history.replaceState({}, document.title, window.location.pathname);
                        showContentSection();
                        loadContent();
                    } else {
                        alert('Authentication failed: ' + JSON.stringify(data));
                    }
                })
                .catch(error => {
                    alert('Auth error: ' + error.message);
                });
        }

        async function loadContent() {
            const token = localStorage.getItem('github_token');
            if (!token) return;

            try {
                // Load hero content
                const heroResponse = await fetch(`https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/src/content/hero`, {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });
                
                if (heroResponse.ok) {
                    const heroFiles = await heroResponse.json();
                    displayFiles('hero-files', heroFiles);
                }

                // Load blog posts
                const postsResponse = await fetch(`https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/src/content/posts`, {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });
                
                if (postsResponse.ok) {
                    const postFiles = await postsResponse.json();
                    displayFiles('posts-files', postFiles);
                }
            } catch (error) {
                console.error('Error loading content:', error);
            }
        }

        function displayFiles(containerId, files) {
            const container = document.getElementById(containerId);
            container.innerHTML = '';
            
            if (files.length === 0) {
                container.innerHTML = '<li>No files found</li>';
                return;
            }

            files.forEach(file => {
                if (file.type === 'file') {
                    const li = document.createElement('li');
                    li.className = 'file-item';
                    li.innerHTML = `
                        <span>${file.name}</span>
                        <button class="edit-btn" onclick="editFile('${file.path}', '${file.name}')">Edit</button>
                    `;
                    container.appendChild(li);
                }
            });
        }

        function editFile(path, name) {
            alert(`Edit functionality for ${name} would open here. File path: ${path}`);
            // Here you would implement a simple editor interface
        }
    </script>
</body>
</html>
